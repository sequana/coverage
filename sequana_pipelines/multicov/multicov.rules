##############################################################################
#
#  Copyright (c) 2016-2021 - Sequana Dev Team (https://sequana.readthedocs.io)
#
#  Distributed under the terms of the 3-clause BSD license.
#  The full license is in the LICENSE file, distributed with this software.
#
#  Website:       https://github.com/sequana/sequana
#  Website:       https://github.com/sequana/fastqc
#  Documentation: http://sequana.readthedocs.io
#  Documentation: https://github.com/sequana/multicov/README.rst
##############################################################################
"""Multicov pipeline"""
import sys
import json

from sequana_pipetools import PipelineManager
from sequana_pipetools import snaketools as sm

sequana_wrapper_branch="main"

configfile: "config.yaml"

manager = PipelineManager("multicov", config,  fastq=False)


# check that the input are BED files ?
filenames = list(manager.samples.values())
__coverage__input = filenames


# Get chrom name from the BED files. Assuming only one chromosome per BED file
chrom_names = []
for filename in filenames:
    chrom_name = open(filename, "r").readline().split()[0].strip()
    chrom_names.append(chrom_name)


# Some final and intermediate file patterns
output_directory = "coverage_reports"
__coverage__output_summary = "coverage_reports/{sample}/sequana_summary_coverage.json"
__coverage__output_rois = "coverage_reports/{sample}/rois.csv"


# The pipeline itself, we need the multiqc as final result:
rule pipeline:
    input: "multiqc/multiqc_report.html"


# the multiqc rule that requires the JSON as input.
rule multiqc:
    input: expand("{sample}/sequana_coverage/sequana_coverage.html", sample=manager.samples)
    output: "multiqc/multiqc_report.html"
    params:
        options=config['multiqc']['options'],
        input_directory=config['multiqc']['input_directory'],
        config_file=config['multiqc']['config_file'],
        modules=config['multiqc']['modules']
    log:
       "multiqc/multiqc.log"
    resources:
        **config["multiqc"]["resources"]
    wrapper:
       f"{sequana_wrapper_branch}/wrappers/multiqc"


rule sequana_coverage:
    input:
        bed=manager.getrawdata(),
        fasta=config['sequana_coverage']['reference_file']
    output:
        "{sample}/sequana_coverage/sequana_coverage.html"
    params:
        circular=config["sequana_coverage"]["circular"],
        window_size=config["sequana_coverage"]["window_size"],
        chunksize=config["sequana_coverage"]["chunksize"],
        double_threshold=config["sequana_coverage"]["double_threshold"],
        gc_window_size=config["sequana_coverage"]["gc_window_size"],
        high_threshold=config["sequana_coverage"]["high_threshold"],
        low_threshold=config["sequana_coverage"]["low_threshold"],
        mixture_models=config["sequana_coverage"]["mixture_models"],
        gbk=config["sequana_coverage"]["annotation_file"]
    wrapper:
        f"{sequana_wrapper_branch}/wrappers/sequana_coverage"

onsuccess:
    pass


onerror:
    from sequana_pipetools.errors import PipeError
    p = PipeError("multicov")
    p.status()

